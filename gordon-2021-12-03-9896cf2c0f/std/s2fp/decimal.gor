/*
 * Copyright (c) 2021 Tero HÃ¤nninen.
 * SPDX-License-Identifier: MIT
 *
 * Derived from Rust's core::num::dec2flt.
 *
 * Arbitrary-precision decimal class for fallback algorithms.
 *
 * This is only used if the fast-path (native floats) and the Eisel-Lemire
 * algorithm are unable to unambiguously determine the float.
 *
 * The technique used is "Simple Decimal Conversion", developed by Nigel Tao
 * and Ken Thompson. A detailed description of the algorithm can be found in
 * "ParseNumberF64 by Simple Decimal Conversion", available at:
 * https://nigeltao.github.io/blog/2020/parse-number-f64-simple.html.
 */

import self.s2fp.common;
import self.s2fp.parse;  // parse_exponent
import self.s2fp;    // PF_UNDERSCORE

struct Decimal {
    usz     num_digits;     // number of significant digits
    int     decimal_point;  // offset of decimal point in significant digits
    bool    truncated;      // is the number of significant digits truncated
    ubyte[MAX_DIGITS] digits; // buffer of the raw digits, in the range [0, 9]
}

define MAX_DIGITS = 768;
// The max digits that can be exactly represented in a 64-bit integer.
define MAX_DIGITS_WITHOUT_OVERFLOW = 19;
define DECIMAL_POINT_RANGE = 2047;

const ubyte[19] FALLBACK_POWERS =
    [0, 3, 6, 9, 13, 16, 19, 23, 26, 29, 33, 36, 39, 43, 46, 49, 53, 56, 59];

BiasedFP decimal_to_biasedfp(ref Decimal d, ref const FPConsts fc)
{
    macro get_shift(n) {
        n < FALLBACK_POWERS.len ? cast(usz) FALLBACK_POWERS[n] : MAX_SHIFT
    }

    define usz MAX_SHIFT = 60;

    BiasedFP fp_zero = {f: 0, e: 0};
    BiasedFP fp_inf  = {f: 0, e: fc.INFINITE_POWER};

    // Short-circuit if the value can only be a literal 0 or infinity.
    if (d.num_digits == 0 || d.decimal_point < -324) {
        return fp_zero;
    } else if (d.decimal_point >= 310) {
        return fp_inf;
    }
    int exp2 = 0;

    // Shift right toward (1/2 ... 1].
    while (d.decimal_point > 0) {
        usz n = cast(usz) d.decimal_point;
        usz shift = get_shift(n);
        d.right_shift(shift);
        if (d.decimal_point < -DECIMAL_POINT_RANGE) {
            return fp_zero;
        }
        exp2 += cast(int) shift;
    }
    // Shift left toward (1/2 ... 1].
    while (d.decimal_point <= 0) {
        usz shift;

        if (d.decimal_point == 0) {
            auto dig = d.digits[0];
            if (dig >= 5) break;
            if (dig == 0 || dig == 1)
                shift = 2;
            else
                shift = 1;
        } else {
            shift = get_shift(-d.decimal_point);
        }

        d.left_shift(shift);
        if (d.decimal_point > DECIMAL_POINT_RANGE) {
            return fp_inf;
        }
        exp2 -= cast(int) shift;
    }

    // We are now in the range [1/2 ... 1] but the binary format uses [1 ... 2].
    exp2 -= 1;
    while ((fc.MINIMUM_EXPONENT + 1) > exp2) {
        usz n = cast(usz) ((fc.MINIMUM_EXPONENT + 1) - exp2);
        if (n > MAX_SHIFT) {
            n = MAX_SHIFT;
        }
        d.right_shift(n);
        exp2 += cast(int) n;
    }
    if ((exp2 - fc.MINIMUM_EXPONENT) >= fc.INFINITE_POWER) {
        return fp_inf;
    }

    // Shift the decimal to the hidden bit, and then round the value
    // to get the high mantissa+1 bits.
    d.left_shift(fc.MANTISSA_EXPLICIT_BITS + 1);
    u64 mantissa = d.round();
    if (mantissa >= (1Lu << (fc.MANTISSA_EXPLICIT_BITS + 1))) {
        // Rounding up overflowed to the carry bit, need to
        // shift back to the hidden bit.
        d.right_shift(1);
        exp2 += 1;
        mantissa = d.round();
        if ((exp2 - fc.MINIMUM_EXPONENT) >= fc.INFINITE_POWER) {
            return fp_inf;
        }
    }
    auto power2 = exp2 - fc.MINIMUM_EXPONENT;
    if (mantissa < (1Lu << fc.MANTISSA_EXPLICIT_BITS)) {
        power2 -= 1;
    }
    // Zero out all the bits above the explicit mantissa bits.
    mantissa &= (1Lu << fc.MANTISSA_EXPLICIT_BITS) - 1;
    return cast(BiasedFP) { f: mantissa, e: power2 };
}

// Trim trailing zeros from the buffer.
void trim(Decimal* self)
{
    // All of the following calls to `Decimal::trim` can't panic because:
    //
    //  1. `parse_decimal` sets `num_digits` to a max of `Decimal::MAX_DIGITS`.
    //  2. `right_shift` sets `num_digits` to `write_index`, which is bounded
    //      by `num_digits`.
    //  3. `left_shift` `num_digits` to a max of `Decimal::MAX_DIGITS`.
    //
    // Trim is only called in `right_shift` and `left_shift`.
    assert(self.num_digits <= MAX_DIGITS);
    while (self.num_digits != 0 && self.digits[self.num_digits - 1] == 0) {
        self.num_digits -= 1;
    }
}

u64 round(Decimal* self)
{
    if (self.num_digits == 0 || self.decimal_point < 0) {
        return 0;
    } else if (self.decimal_point > 18) {
        return 0xFFFF_FFFF_FFFF_FFFF_Lu;
    }
    usz dp = cast(usz) self.decimal_point;
    u64 n = 0;

    for (int i; i < dp; i++) {
        n *= 10;
        if (i < self.num_digits) {
            n += cast(u64) self.digits[i];
        }
    }

    bool round_up = false;

    if (dp < self.num_digits) {
        round_up = self.digits[dp] >= 5;
        if (self.digits[dp] == 5 && dp + 1 == self.num_digits) {
            round_up = self.truncated
                    || ((dp != 0) && (1 & self.digits[dp - 1] != 0));
        }
    }
    if (round_up) {
        n += 1;
    }
    return n;
}

// Computes decimal * 2^shift.
void left_shift(Decimal* self, usz shift)
{
    if (self.num_digits == 0) {
        return;
    }
    usz num_new_digits = number_of_digits_decimal_left_shift(self, shift);
    usz read_index = self.num_digits;
    usz write_index = self.num_digits + num_new_digits;
    u64 n = 0;

    while (read_index != 0) {
        read_index -= 1;
        write_index -= 1;
        n += (cast(u64) self.digits[read_index]) << shift;
        u64 quotient = n / 10;
        u64 remainder = n - (10 * quotient);
        if (write_index < MAX_DIGITS) {
            self.digits[write_index] = cast(ubyte) remainder;
        } else if (remainder > 0) {
            self.truncated = true;
        }
        n = quotient;
    }

    while (n > 0) {
        write_index -= 1;
        u64 quotient = n / 10;
        u64 remainder = n - (10 * quotient);
        if (write_index < MAX_DIGITS) {
            self.digits[write_index] = cast(ubyte) remainder;
        } else if (remainder > 0) {
            self.truncated = true;
        }
        n = quotient;
    }

    self.num_digits += num_new_digits;
    if (self.num_digits > MAX_DIGITS) {
        self.num_digits = MAX_DIGITS;
    }
    self.decimal_point += cast(int) num_new_digits;
    self.trim();
}

// Computes decimal * 2^-shift.
void right_shift(Decimal* self, usz shift)
{
    usz read_index = 0;
    usz write_index = 0;
    u64 n = 0;
    while ((n >> shift) == 0) {
        if (read_index < self.num_digits) {
            n = (10 * n) + cast(u64) self.digits[read_index];
            read_index += 1;
        } else if (n == 0) {
            return;
        } else {
            while ((n >> shift) == 0) {
                n *= 10;
                read_index += 1;
            }
            break;
        }
    }
    self.decimal_point -= cast(int) read_index - 1;
    if (self.decimal_point < -DECIMAL_POINT_RANGE) {
        // `self = Self::Default()`, but without the overhead of clearing `digits`.
        self.num_digits = 0;
        self.decimal_point = 0;
        self.truncated = false;
        return;
    }
    u64 mask = (1Lu << shift) - 1;
    while (read_index < self.num_digits) {
        ubyte new_digit = cast(ubyte) (n >> shift);
        n = (10 * (n & mask)) + cast(u64) self.digits[read_index];
        read_index += 1;
        self.digits[write_index] = new_digit;
        write_index += 1;
    }
    while (n > 0) {
        ubyte new_digit = cast(ubyte) (n >> shift);
        n = 10 * (n & mask);
        if (write_index < MAX_DIGITS) {
            self.digits[write_index] = new_digit;
            write_index += 1;
        } else if (new_digit > 0) {
            self.truncated = true;
        }
    }
    self.num_digits = write_index;
    self.trim();
}

int skip_chars(ref const ubyte[] s, ubyte c, bool skip_underscores)
{
    int n;
    while (s.len) {
        if (s[0] == c)
            n++;
        else if !(skip_underscores && s[0] == '_')
            break;
        s = s[1..$];
    }
    return n;
}

void try_add_digit(Decimal* d, ubyte digit)
{
    if (d.num_digits < MAX_DIGITS)
        d.digits[d.num_digits] = digit;

    d.num_digits += 1;
}

// Parses digits and puts them into self. Returns number of digits added.
//
isz parse_digits(ref const ubyte[] s, ref Decimal d, bool skip_underscores)
{
    isz nbeg = d.num_digits;

    while (s.len) {
        ubyte c = s[0];
        ubyte x = cast(ubyte) (c - '0');

        if (x < 10)
            try_add_digit(&d, x);
        else if (c != '_' || !skip_underscores)
            break;

        s = s[1..$];
    }

    return d.num_digits - nbeg;
}

isz parse_8digits(ref const ubyte[] s, ref Decimal d)
{
    isz nbeg = d.num_digits;

    while (s.len >= 8 && d.num_digits + 8 < MAX_DIGITS) {
        u64 v = read_u64(s);
        if (!is_8digits(v))
            break;

        // SAFETY: d.num_digits + 8 is less than d.digits.len()
        write_u64_unchecked(d.digits[d.num_digits..$], v - 0x3030_3030_3030_3030);
        d.num_digits += 8;
        s = s[8..$];
    }

    return d.num_digits - nbeg;
}

// Parse a big integer representation of the float as a decimal.
// Returns the length of the parsed string (zero on failure).
//
isz parse_decimal(const ubyte[] s, ref Decimal d, uint flags)
{
    const(ubyte[]) start = s;
    bool skip_underscores = (flags & PF_UNDERSCORE) > 0;

    isz n_digchars = skip_chars(&s, '0', skip_underscores);
    n_digchars += parse_digits(&s, &d, skip_underscores);

    if (s.len && s[0] == '.') {
        s = s[1..$];
        isz n_fracdigs = 0;

        if (d.num_digits == 0)
            n_fracdigs += skip_chars(&s, '0', skip_underscores);

        n_fracdigs += parse_8digits(&s, &d);
        n_fracdigs += parse_digits(&s, &d, skip_underscores);
        d.decimal_point = cast(int) -n_fracdigs;
        n_digchars += n_fracdigs;
    }

    if (d.num_digits != 0) {
        // Ignore trailing zeros if there are any
        isz n_trailing_zeros = 0;

        const ubyte[] range = start[0 .. $ - s.len];

        for (isz i = range.len - 1; i >= 0; i--) {
            ubyte c = range[i];
            if (c == '0') {
                n_trailing_zeros += 1;
            } else if (c != '.') {
                break;
            }
        }

        d.decimal_point += cast(int) d.num_digits;
        d.num_digits -= n_trailing_zeros;
        n_digchars += n_trailing_zeros;

        if (d.num_digits > MAX_DIGITS) {
            d.truncated = true;
            d.num_digits = MAX_DIGITS;
        }
    }

    int expl_exp;   // explicit exponent

    if (s.len && s[0] | 0x20 == 'e' && parse_exponent(&s, &expl_exp))
        d.decimal_point += expl_exp;

    for (isz i = d.num_digits; i < MAX_DIGITS_WITHOUT_OVERFLOW; i++)
        d.digits[i] = 0;

    return (start.len - s.len) * (n_digchars > 0);
}

const ushort[65] TABLE = [
    0x0000, 0x0800, 0x0801, 0x0803, 0x1006, 0x1009, 0x100D, 0x1812, 0x1817, 0x181D, 0x2024,
    0x202B, 0x2033, 0x203C, 0x2846, 0x2850, 0x285B, 0x3067, 0x3073, 0x3080, 0x388E, 0x389C,
    0x38AB, 0x38BB, 0x40CC, 0x40DD, 0x40EF, 0x4902, 0x4915, 0x4929, 0x513E, 0x5153, 0x5169,
    0x5180, 0x5998, 0x59B0, 0x59C9, 0x61E3, 0x61FD, 0x6218, 0x6A34, 0x6A50, 0x6A6D, 0x6A8B,
    0x72AA, 0x72C9, 0x72E9, 0x7B0A, 0x7B2B, 0x7B4D, 0x8370, 0x8393, 0x83B7, 0x83DC, 0x8C02,
    0x8C28, 0x8C4F, 0x9477, 0x949F, 0x94C8, 0x9CF2, 0x051C, 0x051C, 0x051C, 0x051C,
];

const ubyte[0x051C] TABLE_POW5 = [
    5, 2, 5, 1, 2, 5, 6, 2, 5, 3, 1, 2, 5, 1, 5, 6, 2, 5, 7, 8, 1, 2, 5, 3, 9, 0, 6, 2, 5, 1,
    9, 5, 3, 1, 2, 5, 9, 7, 6, 5, 6, 2, 5, 4, 8, 8, 2, 8, 1, 2, 5, 2, 4, 4, 1, 4, 0, 6, 2, 5,
    1, 2, 2, 0, 7, 0, 3, 1, 2, 5, 6, 1, 0, 3, 5, 1, 5, 6, 2, 5, 3, 0, 5, 1, 7, 5, 7, 8, 1, 2,
    5, 1, 5, 2, 5, 8, 7, 8, 9, 0, 6, 2, 5, 7, 6, 2, 9, 3, 9, 4, 5, 3, 1, 2, 5, 3, 8, 1, 4, 6,
    9, 7, 2, 6, 5, 6, 2, 5, 1, 9, 0, 7, 3, 4, 8, 6, 3, 2, 8, 1, 2, 5, 9, 5, 3, 6, 7, 4, 3, 1,
    6, 4, 0, 6, 2, 5, 4, 7, 6, 8, 3, 7, 1, 5, 8, 2, 0, 3, 1, 2, 5, 2, 3, 8, 4, 1, 8, 5, 7, 9,
    1, 0, 1, 5, 6, 2, 5, 1, 1, 9, 2, 0, 9, 2, 8, 9, 5, 5, 0, 7, 8, 1, 2, 5, 5, 9, 6, 0, 4, 6,
    4, 4, 7, 7, 5, 3, 9, 0, 6, 2, 5, 2, 9, 8, 0, 2, 3, 2, 2, 3, 8, 7, 6, 9, 5, 3, 1, 2, 5, 1,
    4, 9, 0, 1, 1, 6, 1, 1, 9, 3, 8, 4, 7, 6, 5, 6, 2, 5, 7, 4, 5, 0, 5, 8, 0, 5, 9, 6, 9, 2,
    3, 8, 2, 8, 1, 2, 5, 3, 7, 2, 5, 2, 9, 0, 2, 9, 8, 4, 6, 1, 9, 1, 4, 0, 6, 2, 5, 1, 8, 6,
    2, 6, 4, 5, 1, 4, 9, 2, 3, 0, 9, 5, 7, 0, 3, 1, 2, 5, 9, 3, 1, 3, 2, 2, 5, 7, 4, 6, 1, 5,
    4, 7, 8, 5, 1, 5, 6, 2, 5, 4, 6, 5, 6, 6, 1, 2, 8, 7, 3, 0, 7, 7, 3, 9, 2, 5, 7, 8, 1, 2,
    5, 2, 3, 2, 8, 3, 0, 6, 4, 3, 6, 5, 3, 8, 6, 9, 6, 2, 8, 9, 0, 6, 2, 5, 1, 1, 6, 4, 1, 5,
    3, 2, 1, 8, 2, 6, 9, 3, 4, 8, 1, 4, 4, 5, 3, 1, 2, 5, 5, 8, 2, 0, 7, 6, 6, 0, 9, 1, 3, 4,
    6, 7, 4, 0, 7, 2, 2, 6, 5, 6, 2, 5, 2, 9, 1, 0, 3, 8, 3, 0, 4, 5, 6, 7, 3, 3, 7, 0, 3, 6,
    1, 3, 2, 8, 1, 2, 5, 1, 4, 5, 5, 1, 9, 1, 5, 2, 2, 8, 3, 6, 6, 8, 5, 1, 8, 0, 6, 6, 4, 0,
    6, 2, 5, 7, 2, 7, 5, 9, 5, 7, 6, 1, 4, 1, 8, 3, 4, 2, 5, 9, 0, 3, 3, 2, 0, 3, 1, 2, 5, 3,
    6, 3, 7, 9, 7, 8, 8, 0, 7, 0, 9, 1, 7, 1, 2, 9, 5, 1, 6, 6, 0, 1, 5, 6, 2, 5, 1, 8, 1, 8,
    9, 8, 9, 4, 0, 3, 5, 4, 5, 8, 5, 6, 4, 7, 5, 8, 3, 0, 0, 7, 8, 1, 2, 5, 9, 0, 9, 4, 9, 4,
    7, 0, 1, 7, 7, 2, 9, 2, 8, 2, 3, 7, 9, 1, 5, 0, 3, 9, 0, 6, 2, 5, 4, 5, 4, 7, 4, 7, 3, 5,
    0, 8, 8, 6, 4, 6, 4, 1, 1, 8, 9, 5, 7, 5, 1, 9, 5, 3, 1, 2, 5, 2, 2, 7, 3, 7, 3, 6, 7, 5,
    4, 4, 3, 2, 3, 2, 0, 5, 9, 4, 7, 8, 7, 5, 9, 7, 6, 5, 6, 2, 5, 1, 1, 3, 6, 8, 6, 8, 3, 7,
    7, 2, 1, 6, 1, 6, 0, 2, 9, 7, 3, 9, 3, 7, 9, 8, 8, 2, 8, 1, 2, 5, 5, 6, 8, 4, 3, 4, 1, 8,
    8, 6, 0, 8, 0, 8, 0, 1, 4, 8, 6, 9, 6, 8, 9, 9, 4, 1, 4, 0, 6, 2, 5, 2, 8, 4, 2, 1, 7, 0,
    9, 4, 3, 0, 4, 0, 4, 0, 0, 7, 4, 3, 4, 8, 4, 4, 9, 7, 0, 7, 0, 3, 1, 2, 5, 1, 4, 2, 1, 0,
    8, 5, 4, 7, 1, 5, 2, 0, 2, 0, 0, 3, 7, 1, 7, 4, 2, 2, 4, 8, 5, 3, 5, 1, 5, 6, 2, 5, 7, 1,
    0, 5, 4, 2, 7, 3, 5, 7, 6, 0, 1, 0, 0, 1, 8, 5, 8, 7, 1, 1, 2, 4, 2, 6, 7, 5, 7, 8, 1, 2,
    5, 3, 5, 5, 2, 7, 1, 3, 6, 7, 8, 8, 0, 0, 5, 0, 0, 9, 2, 9, 3, 5, 5, 6, 2, 1, 3, 3, 7, 8,
    9, 0, 6, 2, 5, 1, 7, 7, 6, 3, 5, 6, 8, 3, 9, 4, 0, 0, 2, 5, 0, 4, 6, 4, 6, 7, 7, 8, 1, 0,
    6, 6, 8, 9, 4, 5, 3, 1, 2, 5, 8, 8, 8, 1, 7, 8, 4, 1, 9, 7, 0, 0, 1, 2, 5, 2, 3, 2, 3, 3,
    8, 9, 0, 5, 3, 3, 4, 4, 7, 2, 6, 5, 6, 2, 5, 4, 4, 4, 0, 8, 9, 2, 0, 9, 8, 5, 0, 0, 6, 2,
    6, 1, 6, 1, 6, 9, 4, 5, 2, 6, 6, 7, 2, 3, 6, 3, 2, 8, 1, 2, 5, 2, 2, 2, 0, 4, 4, 6, 0, 4,
    9, 2, 5, 0, 3, 1, 3, 0, 8, 0, 8, 4, 7, 2, 6, 3, 3, 3, 6, 1, 8, 1, 6, 4, 0, 6, 2, 5, 1, 1,
    1, 0, 2, 2, 3, 0, 2, 4, 6, 2, 5, 1, 5, 6, 5, 4, 0, 4, 2, 3, 6, 3, 1, 6, 6, 8, 0, 9, 0, 8,
    2, 0, 3, 1, 2, 5, 5, 5, 5, 1, 1, 1, 5, 1, 2, 3, 1, 2, 5, 7, 8, 2, 7, 0, 2, 1, 1, 8, 1, 5,
    8, 3, 4, 0, 4, 5, 4, 1, 0, 1, 5, 6, 2, 5, 2, 7, 7, 5, 5, 5, 7, 5, 6, 1, 5, 6, 2, 8, 9, 1,
    3, 5, 1, 0, 5, 9, 0, 7, 9, 1, 7, 0, 2, 2, 7, 0, 5, 0, 7, 8, 1, 2, 5, 1, 3, 8, 7, 7, 7, 8,
    7, 8, 0, 7, 8, 1, 4, 4, 5, 6, 7, 5, 5, 2, 9, 5, 3, 9, 5, 8, 5, 1, 1, 3, 5, 2, 5, 3, 9, 0,
    6, 2, 5, 6, 9, 3, 8, 8, 9, 3, 9, 0, 3, 9, 0, 7, 2, 2, 8, 3, 7, 7, 6, 4, 7, 6, 9, 7, 9, 2,
    5, 5, 6, 7, 6, 2, 6, 9, 5, 3, 1, 2, 5, 3, 4, 6, 9, 4, 4, 6, 9, 5, 1, 9, 5, 3, 6, 1, 4, 1,
    8, 8, 8, 2, 3, 8, 4, 8, 9, 6, 2, 7, 8, 3, 8, 1, 3, 4, 7, 6, 5, 6, 2, 5, 1, 7, 3, 4, 7, 2,
    3, 4, 7, 5, 9, 7, 6, 8, 0, 7, 0, 9, 4, 4, 1, 1, 9, 2, 4, 4, 8, 1, 3, 9, 1, 9, 0, 6, 7, 3,
    8, 2, 8, 1, 2, 5, 8, 6, 7, 3, 6, 1, 7, 3, 7, 9, 8, 8, 4, 0, 3, 5, 4, 7, 2, 0, 5, 9, 6, 2,
    2, 4, 0, 6, 9, 5, 9, 5, 3, 3, 6, 9, 1, 4, 0, 6, 2, 5,
];

usz number_of_digits_decimal_left_shift(Decimal* d, usz shift)
{
    shift &= 63;
    ushort xa = TABLE[shift];
    ushort xb = TABLE[shift + 1];
    usz num_new_digits = cast(usz) (xa >> 11);
    usz pow5a = cast(usz) (0x7FF & xa);
    usz pow5b = cast(usz) (0x7FF & xb);

    auto pow5 = TABLE_POW5[pow5a..pow5b];

    for (int i; i < pow5.len; i++) {
        ubyte p5 = pow5[i];

        if      (i >= d.num_digits) return num_new_digits - 1;
        else if (d.digits[i] == p5) continue;
        else if (d.digits[i] < p5)  return num_new_digits - 1;
        else                        return num_new_digits;
    }

    return num_new_digits;
}
